@page "/Eventos/Create/{ClienteID:int}/{UserID}"

@rendermode InteractiveServer
@inject ActividadesService actividadesService
@inject ClientesService clientesService
@inject EventosService eventosService
@inject EventosDetalleService eventosDetalleService
@inject NavigationManager navigation
@inject AuthenticationStateProvider AuthStateProvider


@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using EventMaster.Components.Account
@using EventMaster.Components.Account.Pages
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using EventMaster.Data

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject RoleManager<IdentityRole> RoleManager

@attribute [Authorize(Roles = "admin, cliente")]

<PageTitle>Create</PageTitle>
<div class="container-lg">
    <div class="row mb-3">
        <div class="col md-5">
            <div>
                <h3>Registro de <strong>Eventos</strong></h3>
            </div>
        </div>
    </div>

    <div class="card shadow-lg">
        <div class="card-header">
            <h3 class="text-center"><strong>Create</strong></h3>
        </div>
        <div class="card-body">
            <div class="container">
                <EditForm Model="@Input" OnValidSubmit="Guardar" FormName="CreateEventos">
                    <DataAnnotationsValidator />

                    <div class="row mb-3">
                        <div class="col">
                            <label><strong>Título</strong></label>
                            <InputText required class="form-control" @bind-Value="Input.Titulo" placeholder="Título" />
                        </div>
                        <div class="col">
                            <label><strong>Fecha de Inicio</strong></label>
                            <InputDate required class="form-control" @bind-Value="Input.FechaInicio" />
                        </div>
                    </div>

                    <div class="mb-3">
                        <label><strong>Dirección</strong></label>
                        <InputText required class="form-control" @bind-Value="Input.Direccion" placeholder="Dirección" />
                    </div>

                    <div class="mb-3">
                        <label><strong>Nota</strong></label>
                        <InputTextArea class="form-control" @bind-Value="Input.Nota" placeholder="Nota (opcional)" />
                    </div>

                    @if (!string.IsNullOrEmpty(MensajeError))
                    {
                        <div class="alert alert-danger" role="alert">
                            @MensajeError
                        </div>
                    }

                    <div class="container mb-3">
                        <div class="border border-success p-3 mt-3">
                            <div>
                                <h3 class="text-center mb-3"><strong>Detalle del evento</strong></h3>
                            </div>

                            <div class="row mb-3">
                                <div class="col">
                                    <label><strong>Actividades</strong></label>
                                    <InputSelect required class="form-select" @bind-Value="Input.ActividadId">
                                        <option selected value="0">-- Selecciona --</option>
                                        @foreach (var actividad in ListaActividades)
                                        {
                                            <option value="@actividad.ActividadId">Tipo: @actividad.TipoActividad -- Cupos: @actividad.Cupos -- Descripción: @actividad.Descripcion</option>
                                        }
                                    </InputSelect>
                                </div>
                                <div class="col">
                                    <label><strong>Precio de entrada</strong></label>
                                    <InputNumber required class="form-control" @bind-Value="Input.PrecioEntradaEvento" />
                                </div>
                                <div class="col">
                                    <label><strong>Participantes</strong></label>
                                    <InputNumber required class="form-control" @bind-Value="Input.Participantes" />
                                </div>
                                <div class="col d-flex justify-content-center align-content-center">
                                    <button type="button" @onclick="Limpiar" class="btn btn-secondary bi bi-arrow-counterclockwise m-4">  Limpiar</button>
                                    <button type="button" @onclick="Agregar" class="btn btn-success bi bi-plus-circle m-4">  Agregar</button>
                                </div>
                            </div>
                            @if (!string.IsNullOrEmpty(MensajeErrorDetalle))
                            {
                                <div class="alert alert-danger" role="alert">
                                    @MensajeErrorDetalle
                                </div>
                            }
                            <table class="table table-sm table-hover table-bordered">
                                <thead>
                                    <tr>
                                        <th>ID</th>
                                        <th>Tipo de actividad</th>
                                        <th>Hora Inicio</th>
                                        <th>Hora Fin</th>
                                        <th>Participantes</th>
                                        <th>Precio</th>
                                        <th>Sub-total</th>
                                        <th>Acciones</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var detalle in Evento.ListaDetalle)
                                    {
                                        <tr>
                                            <td>@detalle.ActividadId</td>
                                            <td>@detalle.TipoActividad</td>
                                            <td>@detalle.HoraInicio</td>
                                            <td>@detalle.HoraFin</td>
                                            <td>@detalle.Participantes</td>
                                            <td>@detalle.Precio.ToString("N2")</td>
                                            <td>@((detalle.Participantes * detalle.Precio).ToString("N2"))</td>
                                            <td>
                                                <button type="button" class="btn btn-sm btn-danger bi bi-trash3" @onclick="(() => RemoverDetalle(detalle))">Remover</button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                                <tfoot>
                                    <tr>
                                        <th></th>
                                        <th></th>
                                        <th></th>
                                        <th></th>
                                        <th></th>
                                        <th></th>
                                        <th>Total</th>
                                        <th></th>
                                    </tr>
                                    <tr>
                                        <td></td>
                                        <td></td>
                                        <td></td>
                                        <td></td>
                                        <td></td>
                                        <td></td>
                                        <td>RD$@Evento.PrecioEntradaEvento.ToString("N2")</td>
                                        <td></td>
                                    </tr>
                                </tfoot>
                            </table>
                        </div>
                    </div>

                    <div>
                        <div class="row mb-3">
                            <button @onclick="NavegarA" type="button" class="btn btn-secondary bi bi-arrow-left-circle">Volver</button>
                        </div>
                        <div class="row mb-3">
                            <button type="submit" class="btn custom-button bi bi-floppy">Guardar</button>
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

<style>
    .custom-button {
        background-color: #bf1ff0;
        color: white;
    }

        .custom-button:hover {
            background-color: #9e1ac7; /* versión más oscura */
        }
</style>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    public string? MensajeError { get; set; } = string.Empty;
    public string? MensajeErrorDetalle { get; set; } = string.Empty;
    public Eventos Evento { get; set; } = new();
    public Clientes Cliente { get; set; } = new();
    public List<Actividades> ListaActividades { get; set; } = new();
    public ApplicationUser User { get; set; }

    [Parameter]
    public int ClienteID { get; set; }
    [Parameter]
    public string UserID { get; set; }

    void NavegarA() { NavigationManager.NavigateTo($"/Eventos/Index/{ClienteID}/{UserID}"); }

    protected override async Task OnInitializedAsync()
    {
        Cliente = await clientesService.Buscar(ClienteID);
        User = await UserManager.FindByIdAsync(UserID);
        ListaActividades = await actividadesService.Listar(x => x.IdCliente == ClienteID);
    }

    public async Task Guardar()
    {
        if (Evento.ListaDetalle.Count == 0)
        {
            MensajeError = "El evento debe tener detalle";
            return;
        }

        if (string.IsNullOrEmpty(Input.Titulo) ||
            Input.Direccion == null)
        {
            MensajeError = "Complete los campos requeridos";
            return;
        }

        if (Input.FechaInicio == default)
        {
            MensajeError = "Por favor, indique una fecha valida";
            return;
        }

        var idsActividadesEnDetalle = new List<int>();
        foreach (var detalle in Evento.ListaDetalle)
            idsActividadesEnDetalle.Add(detalle.ActividadId);
        var listaDetalles = Evento.ListaDetalle;

        Evento.ClienteId = ClienteID;
        Evento.TituloEvento = Input.Titulo;
        Evento.Direccion = Input.Direccion;
        Evento.Nota = Input.Nota;
        Evento.FechaInicio = Input.FechaInicio;
        Evento.PrecioEntradaEvento = Input.PrecioEntradaEvento;

        await actividadesService.AfectarCupos(idsActividadesEnDetalle.ToArray(), idsActividadesEnDetalle.ToArray(), Evento, true);
        await eventosService.Guardar(Evento);

        NavigationManager.NavigateTo($"/Eventos/Index/{ClienteID}/{UserID}");
    }

    public void Limpiar()
    {
        Input.ActividadId = 0;
        Input.PrecioEntradaEvento = 0;
        Input.Participantes = 0;
    }

    public async Task Agregar()
    {
        MensajeErrorDetalle = string.Empty;
        if (Input.ActividadId <= 0)
        {
            MensajeErrorDetalle = "Seleccione una actividad";
            return;
        }
        if (Input.Participantes <= 0)
        {
            MensajeErrorDetalle = "Indique la cantidad de participantes";
            return;
        }
        if (Input.PrecioEntradaEvento <= 0)
        {
            MensajeErrorDetalle = "Indique el precio de entrada";
            return;
        }
        var actividad = await actividadesService.Buscar(Input.ActividadId);
        if (actividad == null)
        {
            MensajeErrorDetalle = "Actividad no encontrada";
            return;
        }

        if (Evento.ListaDetalle.Any(x => x.ActividadId == actividad.ActividadId))
        {
            MensajeErrorDetalle = "Esta actividad ya fue agregada";
            return;
        }

        if (Input.Participantes > actividad.Cupos)
        {
            MensajeErrorDetalle = "No hay suficientes cupos para esta actividad";
            return;
        }

        Evento.ListaDetalle.Add(new EventosDetalle()
            {
                Precio = Input.PrecioEntradaEvento,
                Participantes = Input.Participantes,
                ActividadId = actividad.ActividadId,
                EventoId = Evento.EventoId,
                TipoActividad = actividad.TipoActividad,
                HoraInicio = actividad.HoraInicio,
                HoraFin = actividad.HoraFin
            });

        Evento.PrecioEntradaEvento += Input.Participantes * Input.PrecioEntradaEvento;
        Input.Participantes = 0;
        Input.PrecioEntradaEvento = 0;
        Input.ActividadId = 0;
    }

    public void RemoverDetalle(EventosDetalle detalle)
    {
        Evento.PrecioEntradaEvento -= detalle.Precio * detalle.Participantes;
        Input.ActividadId = detalle.ActividadId;
        Input.Participantes = detalle.Participantes;
        Input.PrecioEntradaEvento = detalle.Precio;
        Evento.ListaDetalle.Remove(detalle);
    }

    private sealed class InputModel
    {
        [Required]
        public string Titulo { get; set; } = "";

        public string? Nota { get; set; } = null;

        [Required]
        public string Direccion { get; set; } = "";

        public double PrecioEntradaEvento { get; set; }

        [Required]
        public DateTime FechaInicio { get; set; }

        public int Participantes { get; set; }

        public int ActividadId { get; set; }

        public string TipoActividad { get; set; } = "";

        public TimeOnly HoraInicio { get; set; }

        public TimeOnly HoraFin { get; set; }
    }
}

        @* var actividadesExistentes = await actividadesService.BuscarPorClienteId(ClienteID); 

        foreach (var actividadExistente in actividadesExistentes)
        {
            var horaInicioExistente = actividadExistente.HoraInicio;
            var horaFinExistente = actividadExistente.HoraFin;
            var horaInicioNueva = Input.HoraInicio;
            var horaFinNueva = Input.HoraFin;

            if ((horaInicioNueva < horaFinExistente && horaFinNueva > horaInicioExistente) ||
                (horaInicioExistente < horaFinNueva && horaFinExistente > horaInicioNueva))
            {
                MensajeError = "La actividad se solapa con una actividad existente.";
                return;
            }
        } *@