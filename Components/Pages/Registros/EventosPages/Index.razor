@page "/Eventos/Index/{ClienteID:int}/{UserID}"

@rendermode InteractiveServer

@inject NavigationManager NavigationManager
@inject UserManager<ApplicationUser> UserManager
@inject ClientesService clientesService
@inject EventosService eventosService
@inject ActividadesService actividadesService
@inject AuthenticationStateProvider AuthStateProvider

@attribute [Authorize(Roles = "admin, cliente")]

<PageTitle>Index</PageTitle>

<div class="container">
    <div class="row mb-3">
        <div class="col md-5">
            <div>
                <h3>Registro de <strong>Eventos</strong></h3>
            </div>
        </div>
        <div class="col md-5 text-end">
            <div class="row">
                <AuthorizeView Roles="admin">
                    <Authorized>
                        <div class="col">
                            <button @onclick="RegistroClientes" class="btn custom-button">Volver</button>
                        </div>
                    </Authorized>
                </AuthorizeView>
                <div class="col">
                    <button @onclick="NavegarA" class="btn custom-button">Agregar</button>
                </div>
            </div>
        </div>
    </div>

    <div class="row mb-4">
        <div class="col-4">
            <label><strong>Filtrar</strong></label>
            <div class="input-group">
                <InputSelect class="form-select-lg" @bind-Value="@Filtro.valorEnFiltro">
                    <option value="" selected disabled>--- Selecciona ---</option>
                    <option value="idevento">ID</option>
                    <option value="titulo">Título</option>
                    <AuthorizeView Roles="admin">
                        <Authorized>
                            <option value="cliente">Clliente</option>
                        </Authorized>
                    </AuthorizeView>
                    <option value="direccion">Dirección</option>
                    <option value="fecha">Fecha</option>
                    <option value="estado">Estado</option>
                </InputSelect>
                @*btn restablecer*@
                <button type="button" class="btn btn-sm btn-secondary bi bi-arrow-counterclockwise" @onclick="() => Restablecer()">Restablecer</button>
            </div>
        </div>

        @*Btn Buscar*@
        <div class="col">
            <div class="input-group" style="width: 500px">
                @*textbox buscar*@
                <label>Buscar</label>
                <div class="input-group mb-3">
                    <InputText style="width: 400px" @bind-Value="@Filtro.CriterioBusqueda" class="form-control" placeholder="Buscar" />
                    <button class="btn custom-button" type="button" @onclick="Buscar">Buscar</button>
                </div>
            </div>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(Filtro.MensajeError))
    {
        <div class="alert alert-danger" role="alert">
            @Filtro.MensajeError
        </div>
    }

    <div class="card shadow-lg">
        <div class="card-body">
            <table class="table table-bordered table-hover">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Título</th>
                        <AuthorizeView Roles="admin">
                            <Authorized>
                                <th>Cliente</th>
                            </Authorized>
                        </AuthorizeView>
                        <th>Dirección</th>
                        @* <th>Cupos</th> *@
                        <th>Fecha</th>
                        <th>Estado</th>
                        <th>Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var evento in ListaEventos)
                    {
                        if (evento.ClienteId == ClienteID || userAutenticado.IsInRole("admin"))
                        {
                            <tr>
                                <td>@evento.EventoId</td>
                                <td>@evento.TituloEvento</td>
                                <AuthorizeView>
                                    <Authorized>
                                        <td>@Cliente.Nombre + @Cliente.Apellido</td>
                                    </Authorized>
                                </AuthorizeView>
                                <td>@evento.Direccion</td>
                                @* <td>@evento.Cupos</td> *@
                                <td>@evento.FechaInicio</td>
                                <td>@evento.EstadoEvento</td>
                                <td>
                                    <div class="dropdown">
                                        <a style="cursor: pointer;" class="dropdown-toggle" data-toggle="dropdown">Acción</a>
                                        <div class="dropdown-menu">
                                            <a href="/Eventos/View/@ClienteID/@UserID/@evento.EventoId" class="dropdown-item">Ver</a>
                                            <a href="/Eventos/Edit/@ClienteID/@UserID/@evento.EventoId" class="dropdown-item">Editar</a>
                                            <a href="/Eventos/Delete/@ClienteID/@UserID/@evento.EventoId" class="dropdown-item">Eliminar</a>
                                        </div>
                                    </div>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
                <caption>Cant de Eventos: @CantEventos</caption>
            </table>
        </div>
    </div>
</div>

<style>
    .custom-button {
    background-color: #bf1ff0;
    color: white;
    }

    .custom-button:hover {
    background-color: #9e1ac7; /* versión más oscura */
    }
</style>

@code {
    [Parameter]
    public string UserID { get; set; }
    [Parameter]
    public int ClienteID { get; set; }

    public Filtro Filtro { get; set; } = new();
    public ApplicationUser User { get; set; } = new();
    public Clientes Cliente { get; set; } = new();
    public List<Eventos> ListaEventos { get; set; } = new();
    ClaimsPrincipal userAutenticado { get; set; } = new();

    public int CantEventos => ListaEventos
    .Count(a => a.ClienteId == ClienteID || userAutenticado.IsInRole("admin"));

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        userAutenticado = authState.User;
        Cliente = await clientesService.Buscar(ClienteID);
        User = await UserManager.FindByIdAsync(UserID);
        ListaEventos = await eventosService.Listar(x => true);
    }

    void NavegarA() { NavigationManager.NavigateTo($"/Actividades/Create/{ClienteID}/{UserID}"); }
    void RegistroClientes() { NavigationManager.NavigateTo($"/Clientes/Index"); }

    public async Task Buscar()
    {
        Filtro.MensajeError = "";
        if (string.IsNullOrEmpty(Filtro.valorEnFiltro))
        {
            Filtro.MensajeError = "Debe seleccionar una opcion en el filtro";
            return;
        }

        Filtro.CriterioBusqueda.Trim().TrimEnd().ToLower();

        switch (Filtro.valorEnFiltro)
        {
            case "idevento":
                if (string.IsNullOrEmpty(Filtro.CriterioBusqueda))
                {
                    Filtro.MensajeError = "Debe escribir un ID valido";
                    return;
                }
                if (!Filtro.CriterioBusqueda.All(char.IsDigit))
                {
                    Filtro.MensajeError = "Debe escribir un ID valido";
                    return;
                }
                ListaEventos = await eventosService.Listar(lt => lt.EventoId.ToString().Contains(Filtro.CriterioBusqueda));
                break;

            case "titulo":
                if (string.IsNullOrEmpty(Filtro.CriterioBusqueda))
                {
                    Filtro.MensajeError = "Debe escribir un titulo de actividad valido";
                    return;
                }
                if (Filtro.CriterioBusqueda.Any(char.IsDigit))
                {
                    Filtro.MensajeError = "Debe escribir un titulo de actividad valido";
                    return;
                }
                ListaEventos = await eventosService.Listar(lt => lt.TituloEvento.Trim().ToLower()
                                                            .Contains(Filtro.CriterioBusqueda));
                break;

            case "fecha":
                if (Filtro.Desde == null || Filtro.Hasta == null)
                {
                    Filtro.MensajeError = "Ambos campos de fecha deben contener valores";
                    return;
                }
                if (Filtro.Desde > Filtro.Hasta)
                {
                    Filtro.MensajeError = "La fecha inicial no puede ser mayor a la final";
                    return;
                }
                ListaEventos = await eventosService.Listar(lt => lt.FechaInicio >= Filtro.Desde && lt.FechaInicio <= Filtro.Hasta);
                break;

            case "estado":
                if (string.IsNullOrEmpty(Filtro.CriterioBusqueda))
                {
                    Filtro.MensajeError = "Debe escribir un titulo de actividad valido";
                    return;
                }
                if (Filtro.CriterioBusqueda.Any(char.IsDigit))
                {
                    Filtro.MensajeError = "Debe escribir un titulo de actividad valido";
                    return;
                }
                ListaEventos = await eventosService.Listar(lt => lt.TituloEvento.Trim().ToLower()
                                                            .Contains(Filtro.CriterioBusqueda));
                break;
        }
    }

    public async Task Restablecer()
    {
        Filtro.CriterioBusqueda = string.Empty;
        Filtro.valorEnFiltro = string.Empty;
        Filtro.MensajeError = string.Empty;
        Filtro.Desde = null;
        Filtro.Hasta = null;
        ListaEventos = await eventosService.Listar(x => true);
    }
}